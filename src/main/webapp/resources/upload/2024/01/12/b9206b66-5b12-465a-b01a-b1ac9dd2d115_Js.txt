document.getElementsByClassName("class명")
=> Return: HTMLCollection (live) 배열
=> HTMLCollection 는 foreach 문을 사용할 수 없다.

document.querySelectorAll("선택자명")[index]
=> Return: NodeList (non-live) 배열
=> nodeList 는 foreach 문을 사용할 수 있다.

el.insertAdjacentHTML( position, html )	
인자 2개(위치값, html코드)			
기존 노드 건들지 않고 노드 추가		
position 종류 4가지
beforebegin(이 요소의 형 요소로), 
afterbegin(이 요소의 첫 자식 요소로),
beforeend(이 요소의 마지막 자식요소로),
afterend(이 요소의 동생 요소로)  

innerHTML = "html"
인자 1개 (html 코드)
기존 노드는 삭제되면서 새로 리턴이 되어 나타난다.

<article
  id="electriccars"
  data-columns="3"
  data-index-number="12314"
  data-parent="cars">
  ...
</article>
var article = document.getElementById('electriccars');
 
article.dataset.columns // "3"
article.dataset.indexNumber // "12314" 
                            // data-index-number에서 dataset.indexNumber로 변환
article.dataset.parent // "cars"

const myObject = {
                    name: {
                        firstName: 'bigtop',
                        lastName: 'Kim'
                    },
                    age: 345,
                    phoneNumber: '010-1234-5678',
                    address: 'Somewhere in KOREA',
                    1234567890: 'Number',
                    'phone number': '010-1234-5678'
};
console.log(myObject);

delete myObject["age"];

console.log(myObject);

this는 어떻게 정의되었느냐가 아니라 
어떻게(how) 호출되었느냐에 따라 결정된다.

var array = [1, 2, 3]; => 배열
array; // [1, 2, 3]
var nodes = document.querySelectorAll('div'); // NodeList [div, div, div, div, div, ...] =>유사배열
var els = document.body.children; // HTMLCollection [noscript, link, div, script, ...] =>유사배열

배열 => 배열의 메서드를 사용 할 수 있다 (forEach, filter 등)
유사배열 => 배열의 메서드를 사용 할 수 없다

Array.isArray(array); => isArray()메서드로 배열인지 유사배열인지 판별 가능

Array.from(유사배열) => 유사배열을 배열로 만들어줌

const set = new Set(배열);

-중복없는 배열 만들기
let arr = ['라면','김치볶음밥','스테이크','라면','스테이크','떡볶이']
const set = new Set(arr);
const setArr = [...set];

oninput 이벤트는 input 태그 안의 값들이 변경 될때마다 이벤트가 발생한다.
=> <input id="input" type="text" oninput="myFunction()">

onchange 이벤트는 input 태그의 포커스를 벗어났을때(즉, 입력이 끝났을때) 발생하는 이벤트이다.

let ex = document.querySelector(".ex");
ex.setAttribute("바꿀속성명", "바꿀속성내용");

-타입 알아내는 함수(배열, 객체, null 전부 구분 가능)
function jsType(data){
    return Object.prototype.toString.call(data).slice(8, -1);
}

-null 병합 연산자 ??
a ?? b
=> a가 null 또는 undefined 일 때 b
=> a가 null 또는 undefined가 아닐 경우 a

-or 연산자 ||
a || b
=> a가 false인 경우 b
=> a가 true인 경우 a
(false값 => false, null, undefined, NaN, 0, -0, "", '', ``)

let sec = document.querySelector("#sec");
console.log(sec.getBoundingClientRect());
=>뷰포트 기준에서 bottom, height, left, right, top, bottom, width, x, y 값 

Array.isArray(Element);
=> Element가 배열이면 true, 배열이 아니면 false반환

-String Type의 숫자를 number로 변환
=> 값앞에 +를 붙임
const target = "100";
console.log(typeof +target); => 100

1. node(노드) 탐색하기
부모(parent) 노드 탐색
parentNode : 부모 노드를 리턴합니다.
 
자식(child) 노드 탐색
childNodes : 자식 노드 목록을 NodeList 형태로 리턴합니다.
firstChild : 자식 노드 중, 첫번째 자식 노드를 리턴합니다.
lastChild : 자식 노드 중, 마지막 자식 노드를 리턴합니다.
 
형제(sibling) 노드 탐색
previousSibling : 같은 레벨의 노드 중, 이전 노드를 리턴합니다.
nextSibling : 같은 레벨의 노드 중, 다음 노드를 리턴합니다.

2. element(요소) 탐색하기

부모(parent) 요소(element) 탐색
parentElement : 부모 요소(element)를 리턴합니다.
 
자식(child) 요소(element)탐색
children : 자식 요소(element) 목록을, 'HTMLCollection' 형태로 리턴합니다.
firstElementChild : 자식 요소(element) 중, 첫번째 요소를 리턴합니다.
lastElementChild : 자식 요소(element) 중, 마지막 요소를 리턴합니다.
 
형제(sibling) 요소(element)탐색
previousElementSibling : 같은 레벨의 요소(element) 중, 이전 요소를 리턴합니다.
nextElementSibling : 같은 레벨의 요소(element) 중, 다음 요소를 리턴합니다.

foreach 반복문
foreach 반복문은 오직 Array 객체에서만 사용가능한 메서드입니다.
var items = ['item1', 'item2', 'item3'];
items.forEach(function(item) {
    console.log(item);
});
// 출력 결과: item, item2, item3

for …in 반복문
for in 반복문은 객체의 속성들을 반복하여 작업을 수행할 수 있습니다
var obj = {
    a: 1, 
    b: 2, 
    c: 3
};
for (var prop in obj) {
    console.log(prop, obj[prop]); // a 1, b 2, c 3
}

for …of 반복문
for of 반복문은 ES6에 추가된 새로운 컬렉션 전용 반복 구문입니다. 
for of 구문을 사용하기 위해선 컬렉션 객체가 [Symbol.iterator] 속성을 가지고 있어야만 합니다
var iterable = [10, 20, 30];
for (var value of iterable) {
  console.log(value); // 10, 20, 30
}

for in 반복문과 for of 반복문의 차이점
for in 반복문 : 객체의 모든 열거 가능한 속성에 대해 반복
for of 반복문 : [Symbol.iterator] 속성을 가지는 컬렉션 전용

자바스크립트 부모로의 이벤트 전파 방지
Event.stopPropagation();
btn.addEventListener('click', e => {
	//자식 엘리먼트 이벤트에 추가하면 이벤트가 상위로 전파되지않음
	e.stopPropagation();
    alert('button 클릭!');
});

document.createElement(nodename); Ex) let h1Element = document.createElement("h1"); h1.innerText = "h1 element";
nodename: 필수 매개변수입니다. 
이 매개변수는 문자열 타입으로 생성할 element의 이름을 지정합니다. 
nadename은 생성될 element를 특정하기 때문에 이상한 이름을 전달한다면 알수없는 HTML element가 만들어집니다.

현재 좌표를 기준으로 전달된 좌표만큼 이동하고 싶다면
window.scrollBy(x,y)

전달된 좌표로 이동 하고 싶다면
window.scrollTo(x,y)

-제일 위로
window.scrollTo(0, 0);

-제일 아래로
window.scrollTo(0, document.querySelector('body').scrollHeight);


//javascript의 경우 인자값으로 e만 주면 된다.
window.addEventListener('wheel', (e: WheelEvent) => { 
  console.log(e.deltaY, e.deltaX);
});
wheel 이벤트 감지를 사용하며 e.deltaY 값이 양수면 down wheel, 음수면 up wheel로 판단할 수 있다.
마찬가지로 e.deltaX 는 양수일 때 오른쪽, 음수일 때 왼쪽으로 판단할 수 있다.

-사용자에게 보여지는 브라우저 페이지를 기준으로 좌표로 표시한다. (스크롤바와 상관X)
clientX : 브라우저 페이지를 기준으로 특정 지점의 x 좌표를 표시한다.
clientY : 브라우저 페이지를 기준으로 특정 지점의 y 좌표를 표시한다.

-요소 영역을 기준으로 좌표를 표시한다.
offsetX : 요소를 기준으로 특정 지점의 x 좌표를 표시한다.
offsetY : 요소를 기준으로 특정 지점의 y 좌표를 표시한다.

-스크롤을 포함한 페이지를 기준으로 좌표를 표시한다.
pageX: 페이지를 기준으로 특정 지점의 x 좌표를 표시한다.
pageY: 페이지를 기준으로 특정 지점의 y 좌표를 표시한다.

모니터(스크린)을 기준으로 좌표를 표시한다.
screenX: 스크린을 기준으로 특정 지점의 x 좌표를 표시한다.
screenY: 스크린을 기준으로 특정 지점의 y 좌표를 표시한다.

Math.round() => 반올림
Math.ceil() => 올림
Math.floor() => 내림

Math.pow() => 제곱 함수
ex) Math.pow(2, 5) => 2의 5승 = 2x2x2x2x2 = 32

Math.sqrt() => 제곱근(루트)값 구하는 함수
Math.sqrt(9) => 루트9 => 3

자바스크립트 기본 문법  ::  && (AND 연산)
&&는 좌항과 우항이 모두 참(true)일 때 참이 됩니다.

자바스크립트 기본 문법  ::  || (OR 연산)
'||'는 '||'의 좌우항 중에 하나라도 true라면 true가 되는 논리 연산자입니다.

자바스크립트 기본 문법  :: ! (NOT 연산)
'!'는 부정의 의미로, Boolean의 값을 역전시킵니다.
true를 false로 false를 true로 만든다고 생각하면 쉽습니다.

-배열 정렬(sort)
오름차순 (작은것부터 큰것으로 순서 정렬)
Array.sort((a, b) {
    //a가 크면 양수를 반환
    //a - b 는 오름 차순
    return a - b
})
내림차순 (큰것부터 작은것으로 순서 정렬)
Array.sort((a, b) {
    //b가 크면 양수를 반환
    //b - a 는 내림 차순
    return b - a
})
 sort((a, b) => {return a-b})  : 올림차순으로 정렬
 sort((a, b) => {return b-a})  : 내림차순으로 정렬
 sort((a, b) => {return a-b})[0] : 최소값 반환
 sort((a, b) => {return b-a})[0]  : 최대값 반환

-forEach 
var arr = ['가','나','다','라'];
arr.forEach(function(item,index,arr){	=> 
    console.log(item,index,arr[index+1]);
})

 const options = {
         root: null, // viewport
         rootMargin: "0px",
         threshold: 0.5, // 50%가 viewport에 들어와 있어야 callback 실행
};

const observer = new IntersectionObserver((entries) => {
         entries.forEach((entry) => {
             console.log(entry.isIntersecting);
             if (entry.isIntersecting) {
                 entry.target.classList.add("active");
             } else {
                 entry.target.classList.remove("active");
             }
         });
}, options);

const titleList = document.querySelectorAll("h2");

// 반복문을 돌려 모든 DOM에 적용
titleList.forEach((el) => observer.observe(el));

// 체크박스 초기화
function initCheckbox()  {
  
  // 초기화할 checkbox 선택
  const checkboxes 
       = document.getElementsByName('animal');
  
  // 체크박스 목록을 순회하며 checked 값을 초기화
  checkboxes.forEach((checkbox) => {
    checkbox.checked = false;
  })
}

// 객체의 완벽한 복사
let obj = {
    a: 1,
    b: 2,
    c: {name: 'min'}
};

const copy = JSON.parse(JSON.stringify(obj));
console.log(copy); // { a: 1, b: 2, c: { name: 'min' } }

obj.a = 100;
obj.c.name = 'kyeong min';

console.log(obj.a); // 100
console.log(copy.a); // 1

console.log(obj.c); // { name: 'kyeong min' }
console.log(copy.c); // { name: 'min' } <- copy 객체에서 복사 되지 않았다!!!!!

JSON.stringify 메서드는 자바스크립트 객체를 JSON문자열로 변환 시킨다. => JSON:문자열

반대로 JSON.parse는 JSON문자열을 자바스크립트 객체로 변환 시킨다. => 객체로 parse
그렇기에 객체를 JSON문자열로 변환했다가 다시 객체로 변환하기에, 객체에 대한 참조가 사라진것이다.

class 쓰는 이유: 여러개의 객체를 만들 때 class 쓰면 한줄 컷으로 쓸 수 있다.
class는 object 뽑는 기계일 뿐

-Element.style과 window.getComputedStyle(Element)의 차이
const title = document.querySelector(".title");

// 2. Element.style의 경우
size_1.innerText = title.style.fontSize;
color_1.innerText = title.style.color;
=> 태그에 인라인으로 들어간 스타일만 읽을 수 있음(<p style="color:red"></p>)
=> 요소의 스타일을 바꿀 수 있음(title.style.fontSize = '30px';)
엘리먼트의 속성이라 함은, 태그 내의 인-라인으로 정의한 것들을 말한다. 
**Element.style 속성은 해당 엘리먼트에게 새로운 스타일을 설정하는 데 사용하게 된다.

// 3. getComputedStyle의의 경우
const style = window.getComputedStyle(title);
size_2.innerText = style.getPropertyValue("font-size");
color_2.innerText = style.getPropertyValue("color");
=> 외부 css파일이나 <style></style>태그에 정의된 스타일도 읽을수 있음 (요소의 모든 스타일 값을 가져올 수 있다.)
=> window.getComputedStyle의 경우 속성 재정의가 불가했다.
=> 그 이유는 해당 스타일 객체는 계산된 값이므로 readonly 상태이기 때문이다.
=>window.getComputedStyle는 두 번째 인자로 의사요소를 넘길 수 있어, 의사요소의 스타일에 접근할 수 있다
Ex) const style = window.getComputedStyle(title, '::after'); 
    result.innerText = style.getPropertyValue('content'); =>title::after{}의 속성을 가져올 수 있음 (수정은 못함)
**getComputedStyle() 메소드에서 반환된 객체는 읽기 전용이며, 해당 엘리먼트의 스타일을 검사하는 데 사용할 수 있다.

prototype 은 var Human = function () {this.name}; 과 같이 틀로 쓰는 녀석에게 속성을 정의하는 것 (함수만 prototype을 가지고 있음)

__proto__ 는 var john = new Human(); 에서 나온 john 인스턴스에 속성을 부여하는 것.(인스턴스만 __proto__를 가지고 있음)

더 쉽게 생각해서, prototype은 붕어빵 틀 자체에 기능을 추가하는 것. __proto__는 붕어빵에, 그 추가했던 기능

-style.cssText 사용하기 - css 속성 한번에 여러개 추가하기
=> element.style.cssText  = 'color: blue; background-color: yellow';
style.css속성명 -  기존에 정의된 style에 새로운 속성을 추가합니다.
style.cssText - 기존에 정의된 style을 지우고, cssText로 덮어 씁니다.(기존css가 사라지고 새로 덮어씀)

함수 선언식
=> let a; 처럼 앞에 function a(){} 이런식으로 선언하는 방식
함수 표현식
=> let x = function (a, b) {return a * b};
=> 함수 표현식이 변수에 저장이 되면, 변수는 함수처럼 사용이 가능하다.
     변수에 저장된 함수는 함수명이 따로 필요 없으며, 변수 이름을 통해서 호출한다.
함수 선언식은 var 처럼 호이스팅이 되기 때문에 선언 전에 호출이 되어도 작동한다
 
-객체의 깊은 복사 (다른 주소값을 가지게 복사)
structuredClone(value)
value: 복사할 대상인 원본 객체이다. 이는 구조화된 복제가 가능한 모든 유형을 포함한다.

-옵셔널 체이닝(optional chaining) 연산자 (?.)을 사용하면 
프로퍼티가 없는 중첩 객체를 에러 없이 안전하게 접근할 수 있다.
alert( user?.address?.street ); // undefined
앞의 평가 대상이 존재하는지, 안 하는지를 체크해주고 
존재할 경우 다음 평가를 진행하고 아니면 undefined를 반환한다.

-클래스 관련 js 
 class 이름 읽기 
element.classList;
element.className과 마찬가지로 classList 속성을 사용해서도 class의 이름을 읽을 수 있습니다.

클래스 이름 설정 
element.className = '이름';
기존의 클래스 이름을 모두 삭제하고 새로 설정할 때는 
document.getElementById('ex').className = 'foo' 와 같이 'className' 속성을 사용합니다.
'classList'는 readonly 속성이기 때문에, 직접 값을 지정할 수 없습니다.

클래스 추가 
element.classList.add('이름');
element.classList는 readonly 속성이지만, element.classList.add() 메소드를 사용해서 class를 추가할 수 있습니다.
이 함수는 기존의 class에 새로운 클래스를 추가해줍니다.
element.classList.add() 메소드는 추가하려는 클래스가 이미 해당 요소에 존재한다면 더이상 추가하지 않는다는 점입니다.
여러번 실행해도 같은 클래스가 중복으로 추가되지 않음

클래스 여러개 추가 
element.classList.add('class1', 'class2'...); 이런식으로
element.classList.add() 함수에 파라미터를 여러개 전달하여 
한번에 여러개의 클래스를 추가할 수도 있습니다.

클래스 변경 
element.classList.replace('변경전이름', '변경후이름');
기존의 class 속성에서 특정 class item을 찾아서, 해당 item의 이름을 변경할 수도 있습니다.

클래스 토글(Toggle) 
element.classList.toggle('toggle 할 클래스 이름')
element.classList.toggle()은 만약 element의 "클래스 목록에 해당 클래스가 있으면 제거"하고,
"클래스가 없으면 추가"합니다.

조건에 따라 클래스 toggle 하기 
element.classList.toggle('toggle 할 클래스 이름', 조건문)
조건에 따라 클래스를 toggle 할 수도 있습니다.
조건문은 element.classList.toggle() 함수의 2번째 파라미터로 입력합니다.
만약, 조건문의 결과가 true이면 지정한 클래스가 추가되고,
조건문의 결과가 false이면 지정한 클래스가 삭제됩니다.
function toggleClass() {
  let cnt = 0;
  cnt++;
  document.getElementById('ex').classList.toggle('foo', cnt % 3 === 0);
}
위 예제는 버튼을 클릭할 때마다 i의 값을 증가시키고,
i의 값이 3의 배수일 경우에만 'foo' 클래스를 추가 해주고 있습니다.

해당 클래스가있는지 확인하기 (true, false로 리턴)
element.classList.constains()
이 함수는 특정 클래스 이름이 element의 class 속성에 포함되어 있는지 확인해 줍니다.
해당 속성이 포함되어 있으면 true를 리턴하고, 포함되어 있지 않으면 false를 리턴합니다.

classList의 메서드
=>add, remove, replace, toggle, contains

-frame, iframe 안의 document에 접근 (frame.cotentWindow.document)
var frame_top = parent.document.querySelector("#frame_top").contentWindow.document.querySelector(".btn_slide");

-Jquery의 document.ready(function(){})를 자바스크립트로 구현
window.addEventListener('DOMContentLoaded', function(){

});